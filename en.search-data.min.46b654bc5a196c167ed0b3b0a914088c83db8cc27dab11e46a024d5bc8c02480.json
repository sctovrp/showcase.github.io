[{"id":0,"href":"/showcase.github.io/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":1,"href":"/showcase.github.io/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":2,"href":"/showcase.github.io/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":3,"href":"/showcase.github.io/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":4,"href":"/showcase.github.io/docs/shortcodes/convolution/","title":"Convolution","section":"Shortcodes","content":" Convolución aplicada a una imagen # Definición del problema # Dado un archivo de imagen, se le debe realizar un enmascaramiento visual, que resulte en la aplicación de un efecto mediante el uso de máscaras de convolución.\nSustento teórico # Procesamiento de imágenes # Debemos empezar definiendo una imagen digital como una función bidimensional donde se tiene un número finito de elementos llamados píxeles, cada uno de ellos teniendo una localización y valor definidos.\nCon esto en mente podemos definir el procesamiento de imágenes como el reconocimiento de imágenes 2D, 3D y secuencias de imágenes, análisis, manipulación, transmisión y otras áreas relacionadas, todas ellas haciendo uso de un algoritmo preestablecido. Dentro de las áreas que abarca esta área nos interesa la del procesamiento del color.\nFuente: Procesamiento de imágenes digitales\n¿Qué es una máscara de convolución? # Con el fin de realizar un procesamiento del color que poseen las imágenes digitales, se hace uso de la convolución. Esta se define como el proceso de añadir cada elemento de la imagen a sus vecinos locales, luego de ser operados por un kernel. Esta operación no es una operación corriente de multiplicación de matrices, sino que se define de la siguiente manera:\n\\[(\\begin{bmatrix} a \u0026amp; b \u0026amp; c\\\\ d \u0026amp; e \u0026amp; f\\\\ g \u0026amp; h \u0026amp; i\\\\ \\end{bmatrix} * \\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 3\\\\ 4 \u0026amp; 5 \u0026amp; 6\\\\ 7 \u0026amp; 8 \u0026amp; 9\\\\ \\end{bmatrix}) [2, 2] = (i \\cdot 1) \u0026#43; (h \\cdot 2) \u0026#43; (g \\cdot 3) \u0026#43; (f \\cdot 4) \u0026#43; (e \\cdot 5) \u0026#43; (d \\cdot 6) \u0026#43; (c \\cdot 7) \u0026#43; (b \\cdot 8) \u0026#43; (a \\cdot 9)\\] Tenemos que la matriz de la derecha es nuestro kernel, la de la izquierda es una porción de la imagen, la operación seria invertir alguna de las dos matrices (normalmente suele ser el kernel). Arriba se hace un ejemplo rápido para las coordenadas \\([2, 2]\\) Generalmente podríamos hablar que en términos de sumatorias, la convolución se describe como:\n\\[\\begin{bmatrix} x_{11} \u0026amp; x_{12} \u0026amp; \\cdots \u0026amp; x_{1n}\\\\ x_{21} \u0026amp; x_{22} \u0026amp; \\cdots \u0026amp; x_{21}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\\\ x_{n1} \u0026amp; x_{n3} \u0026amp; \\cdots \u0026amp; x_{mn}\\\\ \\end{bmatrix} * \\begin{bmatrix} y_{11} \u0026amp; y_{12} \u0026amp; \\cdots \u0026amp; y_{1n}\\\\ y_{21} \u0026amp; y_{22} \u0026amp; \\cdots \u0026amp; y_{21}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\\\ y_{n1} \u0026amp; y_{n3} \u0026amp; \\cdots \u0026amp; y_{mn}\\\\ \\end{bmatrix} = \\sum_{i=0}^{m-1}\\sum_{i=0}^{n-1}x_{(m-i)(n-j)} \\cdot y_{(1-i)(1-j)}\\] Difuminado gaussiano # Mediante la implementación de la convolución podemos aplicar efectos a la imagen digital objetivo, en esta ocasión hemos decidido aplicar el difuminado gaussiano. En esta caso, como manejamos dos dimensiones en las operaciones, la formula se describe de la siguiente forma:\n\\[G(x, y) = \\dfrac{1}{\\sqrt{2 \\pi \\sigma}}\\exp(-\\dfrac{x^2 \u0026#43; y^2}{2 \\sigma^2})\\] Esto nos permite generar un kernel que aplica de forma más eficiente el efecto a causa de los valores más exactos. Por ejemplo:\n\\[\\begin{bmatrix} 0.00296902 \u0026amp; 0.0133062 \u0026amp; 0.0219382 \u0026amp; 0.0133062 \u0026amp; 0.00296902 \\\\ 0.0133062 \u0026amp; 0.0596343 \u0026amp; 0.0983203 \u0026amp; 0.0596343 \u0026amp; 0.0133062 \\\\ 0.0219382 \u0026amp; 0.0983203 \u0026amp; 0.162103 \u0026amp; 0.0983203 \u0026amp; 0.0219382 \\\\ 0.0133062 \u0026amp; 0.0596343 \u0026amp; 0.0983203 \u0026amp; 0.0596343 \u0026amp; 0.0133062 \\\\ 0.00296902 \u0026amp; 0.0133062 \u0026amp; 0.0219382 \u0026amp; 0.0133062 \u0026amp; 0.00296902 \\\\ \\end{bmatrix}\\] Fuente: Gaussian blur\nImplementación de la convolución # Empezamos por revisar la función que genera el kernel gaussiano, la cual recibe un tamaño del kernel, un sigma y una constante multiplicativa \\(k\\) . En esta ocasión los valores serán de 11, 11 y 1 respectivamente. La función se basa en esta implementación.\nExpand ↕ function gaussKernel(size, sigma, k) { let value = 0.0; let kernel = [...Array(size)].map(e =\u0026gt; Array(size).fill(value)); let sum = 0; for (let i = 0; i \u0026lt; size; i++) { for (let j = 0; j \u0026lt; size; j++) { let x = i - (size - 1) / 2.0; let y = j - (size - 1) / 2.0; kernel[i][j] = k * Math.exp(((Math.pow(x, 2) + Math.pow(y, 2)) / ((2 * Math.pow(sigma, 2)))) * (-1)); sum += kernel[i][j]; } } for (let i = 0; i \u0026lt; size; i++) { for (let j = 0; j \u0026lt; size; j++) { kernel[i][j] /= sum; } } return kernel; } Ahora procedemos a cargar la imagen y preparar la para aplicarle el efecto.\nExpand ↕ let img; p.preload = function () { img = p.loadImage(\u0026#34;../../../1.jpg\u0026#34;); } p.setup = function () { p.createCanvas(700, 500); p.image(img, 0, 0); gaussFilter(); } p.draw = function () { p.image(img, 0, 0); img.resize(700, 500); } Ahora si, la implementación de la convolución plantea que se deban recorrer cada uno de los píxeles de los canales presentes en la imagen (en este caso, son cuatro: Red, Green, Blue, Alpha) y estos multiplicarlos con los valores que se encuentran en el kernel gaussiano que tengamos creado, para luego de haber hecho esto, se actualicen los valores de la imagen.\nPara esto implementamos una función gaussFilter() que cargue el arreglo de pixeles y los envíe a la función convolution(), para luego poder modificar los valores en la imagen.\nExpand ↕ function gaussFilter() { img.loadPixels(); let sigma = 11; let matrix = gaussKernel(11, sigma, 1); for (let x = 0; x \u0026lt; img.width; x++) { for (let y = 0; y \u0026lt; img.height; y++) { let c = convolution(x, y, matrix, img); let loc = (y * img.width + x) * 4; img.pixels[loc] = p.red(c); img.pixels[loc + 1] = p.green(c); img.pixels[loc + 2] = p.blue(c); img.pixels[loc + 3] = 255; } } img.updatePixels(); } Ahora en la función convolution(), la cual recibe las posiciones de los arreglos de los pixeles a modificar, el kernel como una matriz y la imagen para poder obtener los valores a retornar de los pixeles ya con el efecto aplicado.\nExpand ↕ function convolution(x, y, matrix, img) { let rTotal = 0.0; let gTotal = 0.0; let bTotal = 0.0; let h = Math.floor(matrix.length / 2); for (let i = 0; i \u0026lt; matrix.length; i++) { for (let j = 0; j \u0026lt; matrix.length; j++) { let xloc = (x + i - h); let yloc = (y + j - h); let loc = (img.width * yloc + xloc) * 4; if (xloc \u0026gt; 0 \u0026amp;\u0026amp; xloc \u0026lt; img.width \u0026amp;\u0026amp; yloc \u0026gt; 0 \u0026amp;\u0026amp; yloc \u0026lt; img.height) { rTotal += (img.pixels[loc]) * matrix[i][j]; gTotal += (img.pixels[loc + 1]) * matrix[i][j]; bTotal += (img.pixels[loc + 2]) * matrix[i][j]; } } } return p.color(rTotal, gTotal, bTotal); } Fuente: procesamiento de imagen en p5.js\nConclusiones y trabajo futuro # Podemos concluir que la aplicación de una máscara a través de la implementación de una convolución sobre una imagen digital es realizable, fácil de comprender matemáticamente, pero que es posible que requiera de una implementación paralela para poder obtener valores de forma más rápida. También es importante recalcar que si la imagen posee una alta calidad, el efecto del difuminado no se aplica del todo bien, lo que nos deja con ventaja en la implementación manual de la convolución al poder graduar por medio de los valores del efecto\nEn futuros trabajos se puede indagar que tan factible es una implementación paralela de esta función mediante p5.js, sin necesidad de entrar directamente a codificar a bajo nivel con lenguajes como c++ y haciendo uso de CUDA.\nImagen base Imagen sin aplicar efecto # Esta es la imagen sin aplicar ningún efecto, tan solo se redimensionó para efectos de visualización.\nImplementación por hardware Uso de la función incorporada de p5.js # Aquí podemos apreciar la implementación mediante la función integrada de p5.js\n\u0026lt;script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/p5.min.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/addons/p5.sound.min.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=../../../sketches/hardwareConvolution.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026quot;hardwareConvolution\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; Implementación por software Uso de función creada por el estudiante # Esta implementación de convolución la realizamos de forma secuencial, acá podemos apreciar que con los valores ingresados, el efecto es mucho más notorio, y por lo tanto, es más versátil para permitir graduar acorde el contexto que tan intenso es el efecto.\n\u0026lt;script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/p5.min.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.1/addons/p5.sound.min.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=../../../sketches/softwareConvolution.js\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026quot;softwareConvolution\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; "},{"id":5,"href":"/showcase.github.io/docs/shortcodes/convolutionVideo/","title":"Convolution Video","section":"Shortcodes","content":" Convolución aplicada a un video # Definición del problema # Dado un archivo de imagen, se le debe realizar un enmascaramiento visual, que resulte en la aplicación de un efecto mediante el uso de máscaras de convolución.\nSustento teórico # Procesamiento de imágenes # Debemos empezar definiendo una imagen digital como una función bidimensional donde se tiene un número finito de elementos llamados píxeles, cada uno de ellos teniendo una localización y valor definidos.\nCon esto en mente podemos definir el procesamiento de imágenes como el reconocimiento de imágenes 2D, 3D y secuencias de imágenes, análisis, manipulación, transmisión y otras áreas relacionadas, todas ellas haciendo uso de un algoritmo preestablecido. Dentro de las áreas que abarca esta área nos interesa la del procesamiento del color.\nFuente: Procesamiento de imágenes digitales\n¿Qué es una máscara de convolución? # Con el fin de realizar un procesamiento del color que poseen las imágenes digitales, se hace uso de la convolución. Esta se define como el proceso de añadir cada elemento de la imagen a sus vecinos locales, luego de ser operados por un kernel. Esta operación no es una operación corriente de multiplicación de matrices, sino que se define de la siguiente manera:\n\\[(\\begin{bmatrix} a \u0026amp; b \u0026amp; c\\\\ d \u0026amp; e \u0026amp; f\\\\ g \u0026amp; h \u0026amp; i\\\\ \\end{bmatrix} * \\begin{bmatrix} 1 \u0026amp; 2 \u0026amp; 3\\\\ 4 \u0026amp; 5 \u0026amp; 6\\\\ 7 \u0026amp; 8 \u0026amp; 9\\\\ \\end{bmatrix}) [2, 2] = (i \\cdot 1) \u0026#43; (h \\cdot 2) \u0026#43; (g \\cdot 3) \u0026#43; (f \\cdot 4) \u0026#43; (e \\cdot 5) \u0026#43; (d \\cdot 6) \u0026#43; (c \\cdot 7) \u0026#43; (b \\cdot 8) \u0026#43; (a \\cdot 9)\\] Tenemos que la matriz de la derecha es nuestro kernel, la de la izquierda es una porción de la imagen, la operación seria invertir alguna de las dos matrices (normalmente suele ser el kernel). Arriba se hace un ejemplo rápido para las coordenadas \\([2, 2]\\) Generalmente podríamos hablar que en términos de sumatorias, la convolución se describe como:\n\\[\\begin{bmatrix} x_{11} \u0026amp; x_{12} \u0026amp; \\cdots \u0026amp; x_{1n}\\\\ x_{21} \u0026amp; x_{22} \u0026amp; \\cdots \u0026amp; x_{21}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\\\ x_{n1} \u0026amp; x_{n3} \u0026amp; \\cdots \u0026amp; x_{mn}\\\\ \\end{bmatrix} * \\begin{bmatrix} y_{11} \u0026amp; y_{12} \u0026amp; \\cdots \u0026amp; y_{1n}\\\\ y_{21} \u0026amp; y_{22} \u0026amp; \\cdots \u0026amp; y_{21}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\\\ y_{n1} \u0026amp; y_{n3} \u0026amp; \\cdots \u0026amp; y_{mn}\\\\ \\end{bmatrix} = \\sum_{i=0}^{m-1}\\sum_{i=0}^{n-1}x_{(m-i)(n-j)} \\cdot y_{(1-i)(1-j)}\\] Difuminado gaussiano # Mediante la implementación de la convolución podemos aplicar efectos a las imágenes digitales objetivos, en esta ocasión hemos decidió aplicar el difuminado gaussiano. En esta caso, como manejamos dos dimensiones en las operaciones, la formula se describe de la siguiente forma:\n\\[G(x, y) = \\dfrac{1}{\\sqrt{2 \\pi \\sigma}}\\exp(-\\dfrac{x^2 \u0026#43; y^2}{2 \\sigma^2})\\] Esto nos permite generar un kernel que aplica de forma más eficiente el efecto a causa de los valores más exactos. Por ejemplo:\n\\[\\begin{bmatrix} 0.00296902 \u0026amp; 0.0133062 \u0026amp; 0.0219382 \u0026amp; 0.0133062 \u0026amp; 0.00296902 \\\\ 0.0133062 \u0026amp; 0.0596343 \u0026amp; 0.0983203 \u0026amp; 0.0596343 \u0026amp; 0.0133062 \\\\ 0.0219382 \u0026amp; 0.0983203 \u0026amp; 0.162103 \u0026amp; 0.0983203 \u0026amp; 0.0219382 \\\\ 0.0133062 \u0026amp; 0.0596343 \u0026amp; 0.0983203 \u0026amp; 0.0596343 \u0026amp; 0.0133062 \\\\ 0.00296902 \u0026amp; 0.0133062 \u0026amp; 0.0219382 \u0026amp; 0.0133062 \u0026amp; 0.00296902 \\\\ \\end{bmatrix}\\] Fuente: Gaussian blur\nImplementación de la convolución # Empezamos por revisar la función que genera el kernel gaussiano, la cual recibe un tamaño del kernel, un sigma y una constante multiplicativa k. En esta ocasión los valores serán de 11, 11 y 1 respectivamente. La función se basa en esta implementación.\nExpand ↕ function gaussKernel(size, sigma, k) { let value = 0.0; let kernel = [...Array(size)].map(e =\u0026gt; Array(size).fill(value)); let sum = 0; for (let i = 0; i \u0026lt; size; i++) { for (let j = 0; j \u0026lt; size; j++) { let x = i - (size - 1) / 2.0; let y = j - (size - 1) / 2.0; kernel[i][j] = k * Math.exp(((Math.pow(x, 2) + Math.pow(y, 2)) / ((2 * Math.pow(sigma, 2)))) * (-1)); sum += kernel[i][j]; } } for (let i = 0; i \u0026lt; size; i++) { for (let j = 0; j \u0026lt; size; j++) { kernel[i][j] /= sum; } } return kernel; } Ahora procedemos a cargar el video y preparar lo para aplicarle el efecto.\nExpand ↕ let video; p.preload = function () { video = p.createVideo(\u0026#34;../../../fingers.mov\u0026#34;); } p.setup = function () { p.createCanvas(320, 240); video.loop(); video.hide(); p.background(255) } p.draw = function () { video.pause() gaussFilter(); video.loop() } Ahora si, la implementación de la convolución plantea que se deban recorrer cada uno de los píxeles de los canales presentes en la video (en este caso, son cuatro: Red, Green, Blue, Alpha) y estos multiplicarlos con los valores que se encuentran en el kernel gaussiano que tengamos creado, para luego de haber hecho esto, se actualicen los valores de la imagen.\nPara esto implementamos una función gaussFilter() que cargue el arreglo de pixeles y los envíe a la función convolution(), para luego poder modificar los valores en la video.\nEs importante mencionar que en este caso, el video está siendo procesado frame por frame para seguir con la misma lógica que manejábamos en la implementación a imágenes.\nExpand ↕ function gaussFilter() { video.loadPixels(); let sigma = 11; let matrix = gaussKernel(11, sigma, 1) for (let x = 0; x \u0026lt; p.width; x++) { for (let y = 0; y \u0026lt; p.height; y++) { let c = convolution(x, y, matrix, video); let loc = (y * p.width + x) * 4; p.fill(c) p.stroke(c) p.point(x, y) } } } Ahora en la función convolution(), la cual recibe las posiciones de los arreglos de los pixeles a modificar, el kernel como una matriz y el frame para poder obtener los valores a retornar de los pixeles ya con el efecto aplicado.\nExpand ↕ function convolution(x, y, matrix, video) { let rTotal = 0.0; let gTotal = 0.0; let bTotal = 0.0; let h = Math.floor(matrix.length / 2); for (let i = 0; i \u0026lt; matrix.length; i++) { for (let j = 0; j \u0026lt; matrix.length; j++) { let xloc = (x + i - h); let yloc = (y + j - h); let loc = (p.width * yloc + xloc) * 4; if (xloc \u0026gt; 0 \u0026amp;\u0026amp; xloc \u0026lt; p.width \u0026amp;\u0026amp; yloc \u0026gt; 0 \u0026amp;\u0026amp; yloc \u0026lt; p.height) { rTotal += (video.pixels[loc]) * matrix[i][j]; gTotal += (video.pixels[loc + 1]) * matrix[i][j]; bTotal += (video.pixels[loc + 2]) * matrix[i][j]; } } } return p.color(rTotal, gTotal, bTotal); } Conclusiones y trabajo futuro # Podemos concluir que la aplicación de una máscara a través de la implementación de una convolución sobre una video a cada uno de los frames es realizable, fácil de comprender matemáticamente, pero que es posible que requiera de una implementación paralela para poder obtener valores de forma más rápida, esto se acentúa más, ya que tiene que renderizar cada uno de los frames modificados y al se una implementación secuencial.\nUso de función creada por el estudiante # Esta implementación de convolución la realizamos de forma secuencial, acá podemos apreciar que con los valores ingresados, el efecto es mucho más notorio, y por lo tanto, es más versátil para permitir graduar acorde el contexto que tan intenso es el efecto.\nTambién recordar que es más lenta la visualización del video y es altamente posible que se demore en renderizar.\n"},{"id":6,"href":"/showcase.github.io/docs/shortcodes/scenegraph/","title":"Scenegraph","section":"Shortcodes","content":" Grafo de escena # Definición del problema # Dado unos objetos en un espacio tridimensional, demostrar el uso del grafo de escena, modificando dichos objetos de manera independiente\nSustento teórico # Grafos # Los grafos son un conjunto de objetos llamados vértices o nodos unidos por enlaces llamados aristas o arcos, que permiten representar relaciones binarias entre elementos de un conjunto. Son objeto de estudio de la teoría de grafos.\nFuente: Grafos\nGráficos 3D # Los gráficos en 3D son gráficos que utilizan una representación tridimensional de datos geométricos (a menudo cartesianos) que se almacenan en el computador con el fin de realizar cálculos y representar su resultado. Se compone de varias partes:\nModelado: # La etapa de modelado consiste en dar forma a objetos individuales que luego serán usados en la escena creada. Esto se puede realizar por medio de representación poligonal o definidos por curvas matemáticas. Composición de escena: # Esta etapa trata de distribuir los diferentes elementos (objetos, luces, cámaras\u0026hellip;) en una escena que será utilizada para producir una imagen estática o una animación. Animación: # La animación en 3D es un proceso complejo, porque conlleva la realización previa de otros procesos como el diseño y modelado del objeto a animar. Consiste en la deformación o movimiento de los objetos de un modelo 3D a lo largo del tiempo. Para que haya animación, esta deformación o movimiento debe variar en algún aspecto respecto al tiempo: cambio de luces y formas, movimiento de objetos y cámaras, etc. Los objetos se pueden animar a partir de:\nTransformaciones básicas en los tres ejes (X, Y, Z), rotación, escala y traslación. Modificaciones en formas Fuente: Gráficos 3D por computadora\nGrafo de escena # Es grafo como estructura de datos referente a la representación gráfica de objetos geométricos compuestos (o escenas 3D completas) que ordenan lógicamente sus nodos con la información de cada uno de los elementos geométricos deseados. Esta estructura organizada como un árbol n-ario en la cual se permite cualquier cantidad de nodos hijos, pero solo un nodo padre, facilitando que cuando se realice una operación sobre un nodo, esta se propague a todos los nodos hijos.\nstateDiagram-v2 Avatar --\u003e Tronco Tronco --\u003e Cabeza Tronco --\u003e Brazos Tronco --\u003e Piernas Fuentes: Creación interactiva de grafos de escena para Aplicaciones Gráficas 3D\nImplementación # Definición del grafo de escena # Primero definimos nuestro grafo de escena juntos con los objetos a modificar. Nuestros Objetos van a ser un tanque y una pelota, los cuales son creados por nosotros.\nSus transformaciones (animaciones) serán las siguientes:\nGirar la cámara y poder hacer zoom. Mover el tanque hacia adelante y hacia atrás. Cambiar el sentido de rotación de las llantas. Trasladar todo el escenario. Siempre rotará sobre su eje el cañón de nuestro tanque. Debe de haber una esfera que ninguna traslación afecte. Ahora si, nuestro grafo es el siguiente:\nstateDiagram-v2 Mundo --\u003e Escena Escena --\u003e Esfera Escena --\u003e Tanque Escena --\u003e Cámara Tanque --\u003e Ruedas Tanque --\u003e Cañón Código de la implementación # Lo primero que tenemos que hacer es definir nuestro cámara, así como sliders de ayuda para poder realizar todas las translaciones pedidas.\nExpand ↕ p.setup = function () { p.createCanvas(600, 450, p.WEBGL); xPan = p.createSlider(-600,600, 100,1); yPan = p.createSlider(-450,450, 50,1); xTank = p.createSlider(-400, 400, 0,1); xPan.position(0,550,0); yPan.position(0,580,0); xTank.position(200,550,0); p.createEasyCam(); document.oncontextmenu = function () { return false; } } Luego definimos cada una de las partes del tanque, este código nos permitirá generar las orugas y el cuerpo del mismo. Acá podemos ver como en las translaciones agregamos los valores a variar, junto a otras modificaciones como por ejemplo, si tendrán esta textura o no, su posición inicial, su sentido de rotación, etc.\nEs importante mencionar el uso de las funciones integradas en p5.js de push() y pop(), para poder navegar a través del grafo de escena y modificar los objetos deseados.\nOruga # Expand ↕ function orruga(x,y,z) { p.push() p.noFill() p.translate(x + xTank.value(),y,z) p.beginShape(); p.vertex(0, 0, 0); // more vertex added p.endShape() p.pop() } Casco # Expand ↕ function casco() { p.push() p.texture(imgCamo); p.textureMode(p.NORMAL); p.translate(xTank.value(), 0,0) p.beginShape(); p.vertex(0, 0, 0, 0, 0); // more vertex added p.endShape(p.CLOSE); p.pop(); } Coraza # Expand ↕ function coraza() { p.push() p.texture(imgCamo); p.textureMode(p.NORMAL); p.translate(-90 + xTank.value(),-50, 103); p.box(190, 60, 110); p.pop() } LLantas # Expand ↕ function llantas(x,y,z) { p.push() p.fill(\u0026#34;#09304a\u0026#34;) p.translate(x + xTank.value(),y,z) p.rotateZ(1.5708) p.rotateX(1.5708) if(xPan.value() \u0026gt; 0){ p.rotateY(p.frameCount * 0.01) } else{ p.rotateY(p.frameCount * -0.01) } p.cylinder(30, 50) p.pop() } Cañón # Expand ↕ function cannon(x,y,z){ p.push() p.fill(\u0026#34;#e8c517\u0026#34;) p.translate(x + xTank.value(),y,z) p.rotateZ(1.5708) // p.rotateX(1.5708) p.rotateY(p.frameCount * 0.01) p.cylinder(15, 80) p.pop() } Esfera inmóvil # Expand ↕ function sphereRef() { p.push() p.texture(imgCamo); p.textureMode(p.NORMAL); p.translate(80,-50,-50) p.sphere(40) p.pop() } Luego ya procedemos a invocar dichos elementos según lo necesitemos dentro de la función draw(), así como realizar la translación de toda la escena.\nExpand ↕ p.draw = function () { p.background(250); p.translate(xPan.value(), yPan.value(), 0) sphereRef() orruga(0,0,17) llanta(-10,-50, 20) llanta(-100,-50, 20) llanta(-190,-50, 20) casco() coraza() orruga(0,0,160) llanta(-10,-50, 185) llanta(-100,-50, 185) llanta(-190,-50, 185) cannon(-135,-100, 100) } Conclusiones y trabajo futuro # Podemos concluir que el grafo de escena es una herramienta muy útil a la hora de realizar gráficos en computadora y aplicarles modificaciones a cada unos de los objetos presentes, permitiendo que se hereden las modificaciones, simplificando el código y el entendimiento del desarrollo de este tipo de trabajos.\nEn trabajos futuros, se propone desarrollar más grafos de escena con otras estructuras, en donde la escena y la cámara no estén sujetas. También la mejora de gráficos e interacción del usuario con dichos gráficos.\nEscena 3D # Esta es la escena descrita anteriormente, los sliders de la izquierda son para aplicar las transformaciones a toda la escena, el de la derecha es para mover el tanque sobre el eje x.\nMovimiento de la escena / Movimiento del tanque en eje x\n"},{"id":7,"href":"/showcase.github.io/docs/shortcodes/shader1/","title":"Shader1","section":"Shortcodes","content":" Shaders - Ejercicio 1 # En este ejercicio podemos ver 2 implementaciones básicas referentes a los fragment shaders retomadas del blog preparado para la clase de Computación Visual del profesor Jean Pierre Charalambos Hernandez, a través de este enlace se accede al blog.\nEjemplo basico # Acá nos basamos en las coordenadas baricéntricas y los canales de colores RGB-CMYK para ver la primera implementación de esta técnica, a través de shaders, esto en el archivo color.frag, dicho código está retomado del blog del profesor en la sección referente a shaders.\nFuente: Código base para shaders\ncolor.frag // welcome to your first ever shader :) // in glsl it is mandatory to define a precision! precision mediump float; // define color model: rgb (default) or cmy (its complementary) uniform bool cmy; // interpolated color is emitted from the vertex shader // where the variable is defined in the same exact way // see your console! varying vec4 color4; void main() { // Observe: // 1. All colors are normalized thus vec3(1.0, 1.0, 1.0) gives white // which is the same as vec3(1.0) // see: https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Vector_constructors // 2. Use always the decimal digit as in vec3(1.0). Doing it otherwise // could lead to errors. // 3. color4.rgb builds a vec3 with the first three components of color4 // (which is a vec4) this is refer to as \u0026#39;swizzling\u0026#39; // see: https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Swizzling gl_FragColor = cmy ? vec4((vec3(1.0) - color4.rgb), color4.a) : color4; } Implementación new p5((p) =\u0026gt; { let colorShader; let cmy; let v1, v2, v3; p.preload = function() { // The vertex shader defines how vertices are projected onto clip space. // Most of the times a projection and modelview matrix are needed for this // (see: https://visualcomputing.github.io/docs/shaders/programming_paradigm/). // Here, however, we are going to: // 1. Define the triangle vertices directly in clip space, thus bypassing // both of these matrices (matrices: Tree.NONE). The p5 mandelbrot vertex // shader does just the same: https://p5js.org/reference/#/p5/loadShader // 2. Interpolate vertex color data (varyings: Tree.color4). Note that // color data is defined in a per vertex basis with the fill command below. // Have a look at the generated vertex shader in the console! // readShader: https://github.com/VisualComputing/p5.treegl#handling colorShader = p.readShader(\u0026#39;./../../../sketches/shaders/color.frag\u0026#39;, { matrices: 0, varyings: 1 \u0026lt;\u0026lt; 0 }); } p.setup = function() { // shaders require WEBGL mode to work p.createCanvas(300, 300, p.WEBGL); // https://p5js.org/reference/#/p5/shader p.shader(colorShader); randomizeTriangle(); } p.draw = function() { p.background(0); // the fill command is used to define the colors // (to be interpolated) in a per-vertex basis p.beginShape(p.TRIANGLES); p.fill(\u0026#39;red\u0026#39;); p.vertex(v1.x, v1.y); p.fill(\u0026#39;green\u0026#39;); p.vertex(v2.x, v2.y); p.fill(\u0026#39;blue\u0026#39;); p.vertex(v3.x, v3.y); p.endShape(); } // vertices are given directly in clip-space, // i.e., both x and y vertex coordinates ∈ [-1..1] function randomizeTriangle() { v1 = p5.Vector.random2D(); console.log(v1) v2 = p5.Vector.random2D(); v3 = p5.Vector.random2D(); } p.keyTyped = function() { if (p.key == \u0026#39;c\u0026#39;) { cmy = !cmy; // https://p5js.org/reference/#/p5.Shader/setUniform colorShader.setUniform(\u0026#39;cmy\u0026#39;, cmy); } if (p.key == \u0026#39;r\u0026#39;) { randomizeTriangle(); } } }, \u0026#34;shaderColor\u0026#34;); Luma # Acá lo que se propone es aplicar el filtro Luma, modificando la textura de la imagen a través de texcoords2, lo cual nos permite agilizar la modificación de los píxeles de la imagen, en seguida podemos encontrar los códigos utilizados para la implementación respectiva.\nluma.frag precision mediump float; // uniforms are defined and sent by the sketch uniform bool grey_scale; uniform sampler2D texture; // interpolated texcoord (same name and type as in vertex shader) varying vec2 texcoords2; // returns luma of given texel float luma(vec3 texel) { return 0.299 * texel.r + 0.587 * texel.g + 0.114 * texel.b; } void main() { // texture2D(texture, texcoords2) samples texture at texcoords2 // and returns the normalized texel color vec4 texel = texture2D(texture, texcoords2); gl_FragColor = grey_scale ? vec4((vec3(luma(texel.rgb))), 1.0) : texel; } Implementación new p5((p) =\u0026gt; { let lumaShader; let img; let grey_scale; p.preload = function () { lumaShader = p.readShader(\u0026#39;./../../../sketches/shaders/luma.frag\u0026#39;, { varyings: Tree.texcoords2 }); img = p.loadImage(\u0026#34;../../../1.jpg\u0026#34;); } p.setup = function () { p.createCanvas(700, 500, p.WEBGL); p.noStroke(); p.textureMode(p.NORMAL); p.shader(lumaShader); grey_scale = p.createCheckbox(\u0026#39;luma\u0026#39;, false); grey_scale.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); grey_scale.input(() =\u0026gt; lumaShader.setUniform(\u0026#39;grey_scale\u0026#39;, grey_scale.checked())); lumaShader.setUniform(\u0026#39;texture\u0026#39;, img); } p.draw = function () { p.background(0); p.quad(-p.width / 2, -p.height / 2, p.width / 2, -p.height / 2, p.width / 2, p.height / 2, -p.width / 2, p.height / 2); } }, \u0026#34;shader1\u0026#34;); Ya para revisar el uso de shaders aplicados a una convolución podemos encontrarlo aquí.\nConvolución aplicada en shaders "},{"id":8,"href":"/showcase.github.io/docs/shortcodes/shader2/","title":"Shader2","section":"Shortcodes","content":" Convolución aplicada a shaders # Introducción # Shader # Es un programa informático que realiza cálculos gráficos escrito en un lenguaje de sombreado que se puede compilar independientemente. Es una tecnología que ha experimentado una rápida evolución destinada a proporcionar al programador una interacción con la unidad de procesamiento gráfico (GPU) hasta ahora imposible. Los sombreadores son utilizados para realizar transformaciones de vértices o coloreado de píxeles, entre otras labores, con el propósito de crear efectos especiales, como iluminación, fuego o niebla.\nFuente: Sombreador - Wikipedia\nGLSL # Son las siglas en ingles para openGL Shading Language, el cual es un lenguaje de alto nivel de sombreado con una sintaxis basada en el lenguaje de programación C y RenderMan. Desarrollado para su uso dentro de OpenGL, se ha enfocado en permitir altos niveles de paralelismo en su ejecución.\nFuente: Getting started - What is a fragment shader?\nCon el anterior marco teórico presente, el ejercicio presente es aprovechar el uso de shaders para crear programas que hagan calculos en paralelo, haciendo uso del lenguaje GLSL.\nEl ejercicio propuesto está en aplicar el filtro gaussiano y el filtro laplaciano a la imagen trabajada en la sección enfocada a convolución.\nDesarrollo # Manejo en la instancia p5 # Lo primero es definir la instancia p5 y las variables necesarias, así como la función generadora del filtro gaussiano. También se aplicó un filtro Laplaciano simple retomado de esta pagina web.\nFunción del kernel de Gauss new p5((p) =\u0026gt; { function gaussKernel(size, sigma, k) { let value = 0.0; let kernel = [...Array(size)].map(e =\u0026gt; Array(size).fill(value)); let sum = 0; for (let i = 0; i \u0026lt; size; i++) { for (let j = 0; j \u0026lt; size; j++) { let x = i - (size - 1) / 2.0; let y = j - (size - 1) / 2.0; kernel[i][j] = k * Math.exp(((Math.pow(x, 2) + Math.pow(y, 2)) / ((2 * Math.pow(sigma, 2)))) * (-1)); sum += kernel[i][j]; } } for (let i = 0; i \u0026lt; size; i++) { for (let j = 0; j \u0026lt; size; j++) { kernel[i][j] /= sum; } } vector = [].concat(...kernel) return vector; } // ... } Luego en la función preload() de p5 hacemos referencia al archivo donde tenemos el shader y la imagen que deseamos modificar\nFunción preload p.preload = function () { conShader = p.readShader(\u0026#39;./../../../sketches/shaders/mask.frag\u0026#39;, { varyings: Tree.texcoords2 }); img = p.loadImage(\u0026#34;../../../2.png\u0026#34;); } Ahora bien, tenemos que transmitir mediante variables uniformes datos importantes para poder realizar la convolución en el shader. Es importante recordar que el shader se aplica a todos los píxeles que se encuentran en la imagen, facilitándonos el proceso de iterar a través de la misma.\nEn esta situación, debemos pues es enviar:\nLa imagen que deseamos modificar. El kernel que contiene los valores correctos para aplicar el filtro. El desplazamiento dentro del kernel para aplicar correctamente los valores del kernel en la imagen, es decir su desplazamiento relativo dentro de la imagen. Esto podremos apreciarlo en la siguiente función:\nFunción fragment function fragment() { // define shader p.shader(conShader); // send img and mask conShader.setUniform(\u0026#39;texture\u0026#39;, img); conShader.setUniform(\u0026#39;mask\u0026#39;, mask); conShader.setUniform(\u0026#39;maskSharpening\u0026#39;, maskSharpening); // define and send texOffset texOffset = [1 / img.width, 1 / img.height] conShader.setUniform(\u0026#39;texOffset\u0026#39;, texOffset) } Ahora bien, dentro de la función setup() definimos el espacio de trabajo y las banderas que vamos a utilizar para saber cuál filtro se va a mandar.\nFunción setup p.setup = function () { p.createCanvas(700, 500, p.WEBGL); p.noStroke(); p.textureMode(p.NORMAL); // define and send filter filter = p.createCheckbox(\u0026#39;gaussian filter\u0026#39;, false); filter2 = p.createCheckbox(\u0026#39;sharpening filter\u0026#39;, false); filter3 = p.createCheckbox(\u0026#39;both filters\u0026#39;, false); filter.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); filter.input(() =\u0026gt; conShader.setUniform(\u0026#39;filter\u0026#39;, filter.checked())); filter2.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); filter2.input(() =\u0026gt; conShader.setUniform(\u0026#39;filter\u0026#39;, filter2.checked())); filter3.style(\u0026#39;color\u0026#39;, \u0026#39;white\u0026#39;); filter3.input(() =\u0026gt; conShader.setUniform(\u0026#39;filter\u0026#39;, filter3.checked())); } Por último, en la función draw(), actualizaremos el espacio de trabajo y las variables según la elección de filtro que vayamos a utilizar.\nFunción draw p.draw = function () { p.background(0); p.quad(-p.width / 2, -p.height / 2, p.width / 2, -p.height / 2, p.width / 2, p.height / 2, -p.width / 2, p.height / 2); fragment(mask) if (filter.checked()) { // create mask mask = gaussKernel(3, 50, 1); } if (filter2.checked()) { mask = maskSharpening; } if (filter3.checked()) { if (mask.length == 0) { mask = Array(maskSharpening.length).fill(1); } let newMask = []; for (let index = 0; index \u0026lt; mask.length; index++) { newMask.push(mask[index] + maskSharpening[index]) } mask = newMask; } } Manejo en el shader # Dentro del archivo .frag, debemos de hacer coincidir el nombre de aquellas variables uniformes que mandamos desde la instancia p5.\nVariables en .frag precision mediump float; uniform sampler2D texture; uniform vec2 texOffset; // holds the 3x3 kernel uniform float mask[9]; uniform bool filter; // we need our interpolated tex coord varying vec2 texcoords2; En la función main() es obtener los valores respectivos de la imagen en las coordinadas correctas que se reflejan al superponer el kernel. Luego con estos valores, multiplicamos los valores de la imagen con los del kernel.\nUna vez hecho esto, se aplica los valores obtenidos sobre la imagen.\nFunción main void main() { // 1. Use offset to move along texture space. vec2 tc0 = texcoords2 + vec2(-texOffset.s, -texOffset.t); vec2 tc1 = texcoords2 + vec2( 0.0, -texOffset.t); vec2 tc2 = texcoords2 + vec2(+texOffset.s, -texOffset.t); vec2 tc3 = texcoords2 + vec2(-texOffset.s, 0.0); vec2 tc4 = texcoords2 + vec2( 0.0, 0.0); vec2 tc5 = texcoords2 + vec2(+texOffset.s, 0.0); vec2 tc6 = texcoords2 + vec2(-texOffset.s, +texOffset.t); vec2 tc7 = texcoords2 + vec2( 0.0, +texOffset.t); vec2 tc8 = texcoords2 + vec2(+texOffset.s, +texOffset.t); // 2. Sample texel neighbours within the rgba array vec4 rgba[9]; rgba[0] = texture2D(texture, tc0); rgba[1] = texture2D(texture, tc1); rgba[2] = texture2D(texture, tc2); rgba[3] = texture2D(texture, tc3); rgba[4] = texture2D(texture, tc4); rgba[5] = texture2D(texture, tc5); rgba[6] = texture2D(texture, tc6); rgba[7] = texture2D(texture, tc7); rgba[8] = texture2D(texture, tc8); // 3. Apply convolution kernel vec4 convolution; for (int i = 0; i \u0026lt; 9; i++) { convolution += rgba[i]*mask[i]; } // 4. Set color from convolution or let img without modification if (filter) { gl_FragColor = vec4(convolution.rgb, 1.0); } else { gl_FragColor = rgba[4]; } } Resultados # La implementación anteriormente descrita se encuentra en este lienzo aplicado a una imagen.\nEn este lienzo se encuentra la implementación se esta aplicando a un video.\nAhora si se compara con la implementación realizada anteriormente en este blog, claramente se puede ver la diferencia en el framerate, incluso, en el hecho de visualizar ambos lienzos con el efecto activado sin ningún inconveniente o disminución en el framerate.\nConvolución aplicada a video Conclusiones y trabajos futuros # Podemos concluir que el uso de shaders hace más eficiente la implementación de convoluciones en archivos de imágenes o video, cumpliendo así, una meta de estudio propuesta anteriormente para ambos aspectos. Queda pues, la invitación a revisar su uso en otros aspectos, que permitan realizar proyectos de diversa índole temática y técnica.\n"},{"id":9,"href":"/showcase.github.io/docs/shortcodes/softwareRendering/","title":"Software Rendering","section":"Shortcodes","content":" Renderizado por Software # Definición # El renderizado por software es el proceso de generar una imagen de un modelo por medio de cálculos computacionales en un programa informático.\nEn el contexto del renderizado de gráficos, el renderizado por software se refiere a un proceso de renderizado que no depende de los ASIC de hardware de gráficos, como una tarjeta gráfica. El renderizado tiene lugar enteramente en la CPU. Renderizar todo con la CPU (de propósito general) tiene la principal ventaja de que no está restringido a las capacidades (limitadas) del hardware de gráficos, pero la desventaja es que se necesitan más semiconductores para obtener la misma velocidad.\nEl renderizado se utiliza en arquitectura, simuladores, videojuegos, efectos visuales de cine y televisión y visualización de diseños. El renderizado es el último paso del proceso de animación y da el aspecto final a los modelos y a la animación con efectos visuales como el sombreado, el mapeado de texturas, las sombras, los reflejos y el desenfoque de movimiento. El renderizado puede dividirse en dos categorías principales: el renderizado en tiempo real (también conocido como renderizado en línea) y el pre-renderizado (también llamado renderizado fuera de línea). El renderizado en tiempo real se utiliza para renderizar una escena de forma interactiva, como en los videos juegos en 3D, y generalmente cada fotograma debe ser renderizado en unos pocos milisegundos. El renderizado fuera de línea se utiliza para crear imágenes y películas realistas, en las que cada fotograma puede tardar horas o días en completarse, o para la depuración de código gráfico complejo por parte de los programadores.\nFuente: Software rendering\nEstado del arte # En los últimos años podemos apreciar que el uso de software de renderizado ha crecido ampliamente, impregnándose en todos los campos de la actividad humana, al estar está más correlacionada con el uso de computadores.\nLos avances aquí presentados serán enfocados más a aplicaciones relacionadas con la astronomía.\nIntroducing PyCross: PyCloudy Rendering Of Shape Software for pseudo 3D ionisation modelling of nebulae # Este artículo publicado en el año 2020 por K. Fitzgerald, E.J. Harvey, N. Keaveney, M.P. Redman a través del portal web de revistas científicas ScienceDirect trata un tema relevante para el entendimiento de la evolución estelar: La investigación de los procesos de las nebulosas foto ionizadas.\nPara este artículo, presentan el uso de PyCross: PyCloudy Rendering Of Shape Software, una aplicación de modelado pseudo 3D que genera modelos de foto ionización de nebulosas ópticamente delgadas, creados con el software Shape integrado. El cual podemos encontrar de forma gratuita en el Github de PyCross.\nAcá podemos apreciar una imagen generada por este software, consiste en 3 mapas de color de 71 posibles en donde se describe el modelo de emision 5007 de los datos prueba. Las barras de color corresponden a la temperatura efectiva de la fuente ionizada.\nTambién podemos generar con esas mismas características estos modelos de foto ionización de las nebulosas [N II] 6584 A. En el artículo se exponen más modelos generados para estos cuerpos espaciales, utilizando dicho software y su integración.\nArticulo retomado de este link\nStudy of open source web map rendering software for rendering Bhuvan High Resolution Satellite data # Este artículo publicado en el año 2019 por A. R. Muppalla, N. Naresh, P. Aravinda Kumar, V. M. Bothale, A. K. Joshi and A. V. V. Prasad en el conferencia del 20 de octubre del 02219 de IEEE referente a avances recientes en geociencia y teledetección, muestra Bhuvan la plataforma geológica india de la ISRO.\nDicha plataforma alberga datos satelitales multitemporales, multisensoriales y multirresolución a través de Internet y se utiliza para diversas aplicaciones de teledetección.\nEn este caso el software de renderización de mapas de código abierto es Mapnik y MapServer, este es utilizado para mostrar datos satelitales como mosaicos de mapas en línea, esto en función del nivel del zoom, proyección y área de interés.\nMapnik # Es un conjunto de herramientas de código abierto para la representación de mapas. Se trata de una biblioteca compartida en C++ que proporciona algoritmos y patrones para el acceso y la visualización de datos espaciales. Utiliza la librería de renderizado AGG (Anti Grain Geometry) y ofrece un renderizado antialiasing con una precisión inferior al píxel.\nMapServer # Es un software de código abierto para la representación de mapas geográficos y es ampliamente utilizado para la navegación de datos SIG, crear mapas de imágenes geográficas que se pueden utilizar directamente a través de Internet. Está desarrollado en C y tiene características importantes como el soporte de plataformas cruzadas, interfaces de programación de aplicaciones (API) disponibles en PHP, Python, Perl, Ruby, Java y .NET\nArticulo retomado de este link\nPosibles aplicaciones # Se ha presentado una nueva aplicación para la generación de modelos pseudo 3D de foto ionización de nebulosas de capa fina modeladas. El software fue desarrollado utilizando un ciclo de vida de desarrollo de software formal, escrito en Python y funcionará sin necesidad de instalar ningún entorno de desarrollo o paquetes adicionales de Python.\nPor otra parte para el manejo de las imágenes satelitales, el método de remuestreo de Lanczos es conocido por ser óptimo para las imágenes manejadas en el campo de la teledetección. Este método permitió obtener imágenes de alta calidad sobre los demás implementados en Mapnik y MapServer.\n"}]