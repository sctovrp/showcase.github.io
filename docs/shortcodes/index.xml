<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Presentación</title><link>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/</link><description>Recent content on Presentación</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sctovrp.github.io/showcase.github.io/docs/shortcodes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/convolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/convolution/</guid><description>Convolución aplicada a una imagen # Definición del problema # Dado un archivo de imagen, se le debe realizar un enmascaramiento visual, que resulte en la aplicación de un efecto mediante el uso de máscaras de convolución.
Sustento teórico # Procesamiento de imágenes # Debemos empezar definiendo una imagen digital como una función bidimensional donde se tiene un número finito de elementos llamados píxeles, cada uno de ellos teniendo una localización y valor definidos.</description></item><item><title/><link>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/convolutionVideo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/convolutionVideo/</guid><description>Convolución aplicada a un video # Definición del problema # Dado un archivo de imagen, se le debe realizar un enmascaramiento visual, que resulte en la aplicación de un efecto mediante el uso de máscaras de convolución.
Sustento teórico # Procesamiento de imágenes # Debemos empezar definiendo una imagen digital como una función bidimensional donde se tiene un número finito de elementos llamados píxeles, cada uno de ellos teniendo una localización y valor definidos.</description></item><item><title/><link>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/scenegraph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/scenegraph/</guid><description>Grafo de escena # Definición del problema # Dado unos objetos en un espacio tridimensional, demostrar el uso del grafo de escena, modificando dichos objetos de manera independiente
Sustento teórico # Grafos # Los grafos son un conjunto de objetos llamados vértices o nodos unidos por enlaces llamados aristas o arcos, que permiten representar relaciones binarias entre elementos de un conjunto. Son objeto de estudio de la teoría de grafos.</description></item><item><title/><link>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/shader1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/shader1/</guid><description>Shaders - Ejercicio 1 # En este ejercicio podemos ver 2 implementaciones básicas referentes a los fragment shaders retomadas del blog preparado para la clase de Computación Visual del profesor Jean Pierre Charalambos Hernandez, a través de este enlace se accede al blog.
Ejemplo basico # Acá nos basamos en las coordenadas baricéntricas y los canales de colores RGB-CMYK para ver la primera implementación de esta técnica, a través de shaders, esto en el archivo color.</description></item><item><title/><link>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/shader2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/shader2/</guid><description>Convolución aplicada a shaders # Introducción # Shader # Es un programa informático que realiza cálculos gráficos escrito en un lenguaje de sombreado que se puede compilar independientemente. Es una tecnología que ha experimentado una rápida evolución destinada a proporcionar al programador una interacción con la unidad de procesamiento gráfico (GPU) hasta ahora imposible. Los sombreadores son utilizados para realizar transformaciones de vértices o coloreado de píxeles, entre otras labores, con el propósito de crear efectos especiales, como iluminación, fuego o niebla.</description></item><item><title/><link>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/softwareRendering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sctovrp.github.io/showcase.github.io/docs/shortcodes/softwareRendering/</guid><description>Renderizado por Software # Definición # El renderizado por software es el proceso de generar una imagen de un modelo por medio de cálculos computacionales en un programa informático.
En el contexto del renderizado de gráficos, el renderizado por software se refiere a un proceso de renderizado que no depende de los ASIC de hardware de gráficos, como una tarjeta gráfica. El renderizado tiene lugar enteramente en la CPU. Renderizar todo con la CPU (de propósito general) tiene la principal ventaja de que no está restringido a las capacidades (limitadas) del hardware de gráficos, pero la desventaja es que se necesitan más semiconductores para obtener la misma velocidad.</description></item></channel></rss>